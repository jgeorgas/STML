<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://dana.ucc.nau.edu/jew69/schemas/archstudio/ext/types.xsd"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns:archinstance="http://dana.ucc.nau.edu/jew69/schemas/archstudio/core/instance.xsd"
            targetNamespace="http://dana.ucc.nau.edu/jew69/schemas/archstudio/ext/types.xsd"
            elementFormDefault="qualified"
            attributeFormDefault="qualified">

  <xsd:import namespace="http://dana.ucc.nau.edu/jew69/schemas/archstudio/core/instance.xsd"
              schemaLocation="http://dana.ucc.nau.edu/jew69/schemas/archstudio/core/instance.xsd"/>

  <xsd:annotation>
    <xsd:documentation>
      xArch Type XML Schema 1.0
      
      Change Log:
         2004-07-01: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Added a signature link to Interface.
         2004-06-28: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Added ID/Description to SignatureInterfaceMappings.
         2003-01-10: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Added a Description to Signatures.
         2002-07-23: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Changed location of core (xArch) schema in the import
           statement to a more stable URL.
         2002-05-28: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Added an ID to signatures, so SignatureInterfaceMappings
           will work properly.  Thanks to Rob Egelink
           [egelink@ics.uci.edu].
         2002-05-08: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Added a PrescribedLinkInstance type.  Originally, it
           was thought that such a type was not necessary because
           the structure link could be divined from looking at
           the endpoints in the instance link.  However, this
           requires significant computational effort, and
           we now consider it best to include it as a type.
         2002-01-28: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Upgraded to 2001 XML Schema standard and validated
           with XML Spy 4.2.  Only changes were to the namespace
           declaration for 'xsd' in the header.
         2001-07-17: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Changed cardinality of 'type' link on interface 
           from 0-unbounded to 0-1.  Thanks to Girish
           Suryanarayana [sgirish@ics.uci.edu].
         2001-05-22: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Changed cardinality of 'type' link on component and
           connector from 0-unbounded to 0-1.  Thanks to Girish
           Suryanarayana [sgirish@ics.uci.edu].
         2001-04-12: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Cleaned up and validated with XML Spy 3.5.
           Removed extraneous subArchInterface tag in Signature;
           it had already been replaced by SignatureInterfaceMapping.
         2000-12-06: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Added Prescribed{Component,Connector,Interface}Instance
           types so instances can point back to their structural
           entities.
         2000-12-05: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Removed Point type in types namespace, imported it
           from instances namespace.
           Added set of groups to archStructure.
           Fixed 1st character of names of children of
           SignatureInterfaceMapping to be lowercase.
           Fixed namespace of description type on archStructure tag.
         2000-12-04: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Removed explicit collections from the schema
           and replaced them with Kleene-star type elements
           for more flexibility/extensibility.
         2000-11-27: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Made all the multiple-element-sets into collections.
         2000-10-02: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Made 'direction' an optional subelement of Signature.
         2000-09-28: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Fixed some syntax errors and validated with XSV
         2000-09-27: Eric M. Dashofy [edashofy@ics.uci.edu]:
           Initial Development

    </xsd:documentation>
  </xsd:annotation>

  <!--
    ELEMENT: archStructure
    
    The archStructure element (of type ArchStructure) is the root element
    that is the aegis over all other elements in the architecture
    structure.  The archStructure element defines the design-time
    prescription for the architecture, not a description of a running
    system.
   -->
  <xsd:element name="archStructure" type="ArchStructure"/>

  <!--
    TYPE: Interface

    The Interface type describes an opaque interface for use
    at the structure level.  No semantic information is provided
    at this level.  An opaque interface contains an ID,
    description, and a direction.  This may be connected
    to other interfaces via a link.  The direction is
    optional.  An interface also contains a pointer to its type,
    and an optional pointer to the signature for which it is an
    instance.
   -->
  <xsd:complexType name="Interface">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
      <xsd:element name="direction"   type="archinstance:Direction"
                   minOccurs="0" maxOccurs="1"/>
      <xsd:element name="type"        type="archinstance:XMLLink"
                   minOccurs="0" maxOccurs="1"/>
      <xsd:element name="signature"   type="archinstance:XMLLink"
                   minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: Component
  
    The Component type describes an opaque component for use
    at the structural level.  No semantic information is provided
    at this level.  An opaque component contains an ID,
    description, and zero or more interfaces.  A component also
    contains a pointer to its type.
   -->
  <xsd:complexType name="Component">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
      <xsd:element name="interface"   type="Interface"
                   minOccurs="0" maxOccurs="unbounded"/> 
      <xsd:element name="type"        type="archinstance:XMLLink"
                   minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: Connector

    The Connector type describes an opaque connector for use
    at the structural level.  No semantic information is provided
    at this level.  An opaque connector contains an ID,
    description, and zero or more interfaces.  A connector also
    contains a pointer to its type.
   -->
  <xsd:complexType name="Connector">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
      <xsd:element name="interface"   type="Interface"
                   minOccurs="0" maxOccurs="unbounded"/> 
      <xsd:element name="type"        type="archinstance:XMLLink"
                   minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: Link

    The Link type describes a link between two interfaces.  
    All links at the structural level exist between interfaces on
    components and connectors.  A Link has an ID, a description,
    and exactly two endpoints.
   -->
  <xsd:complexType name="Link">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
      <xsd:element name="point" type="archinstance:Point"
                   minOccurs="2" maxOccurs="2"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: SignatureInterfaceMapping

    The SignatureInterfaceMapping type maps a signature on a
    component or connector type to an interface on a component
    or connector in the archStructure tree.  This is roughly
    analogous to the InterfaceInstanceMapping in the instance
    tree.  This shows that, when a higher-level component
    or connector type is instantiated, the interfaces that are
    instantiated with it are mapped onto the interfaces in
    the structure of the internal component or connector.
   -->
  <xsd:complexType name="SignatureInterfaceMapping">
    <xsd:sequence>
      <xsd:element name="description"    type="archinstance:Description"/>
      <xsd:element name="outerSignature" type="archinstance:XMLLink"/>
      <xsd:element name="innerInterface" type="archinstance:XMLLink"/>
    </xsd:sequence>
    <xsd:attribute name="id"             type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: SubArchitecture

    The SubArchitecture type is used in the ConnectorType
    and ComponentType so that a component or connector
    type may be a compound type; that is, it may have
    a subarchitecture.  The SubArchitecture specification
    contains a link to the structure of the subarchitecture
    as well as mappings from outer signatures to inner
    interfaces.
   -->
  <xsd:complexType name="SubArchitecture">
    <xsd:sequence>
      <xsd:element name="archStructure" type="archinstance:XMLLink"/>
      <xsd:element name="signatureInterfaceMapping"
                   type="SignatureInterfaceMapping"
                   minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <!--
    TYPE: ArchStructure

    The ArchStructure type describes the structural description of
    an architecture.  It has no semantic information associated with it.
    It is composed of three collections: of connectors, components, and links.
    This forms the basis for schema extensions that can more richly describe
    this skeleton architecture.
   -->
  <xsd:complexType name="ArchStructure">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
      <xsd:element name="component"   type="Component"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="connector"   type="Connector"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="link"        type="Link"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="group"       type="archinstance:Group"
                   minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    ELEMENT: archTypes
    
    The archTypes element specifies the types associated with the
    instances specified in the archStructure element.  See
    the ArchTypes type comment for a more detailed description.
   -->
  <xsd:element name="archTypes" type="ArchTypes"/>
  
  <!--
    TYPE: Signature
    
    The Signature type defines one (of many) "signatures" that a component
    or connector type can possess.  A signature basically says, "FOO type
    components/connectors, when instantiated, should contain an instance
    of BAR type interface.  The 'type' pointer points at the signature's
    InterfaceType element, defined elsewhere in this XSchema.  Additionally, 
    if the type has substructure, then the 'type' tag must point at the 
    interface type in the substructure's xArch file to maintain type 
    compatibility.
   -->
  <xsd:complexType name="Signature">
    <xsd:sequence>
      <xsd:element name="description"       type="archinstance:Description"/>
      <xsd:element name="direction"         type="archinstance:Direction"
                   minOccurs="0" maxOccurs="1"/>
      <xsd:element name="type"              type="archinstance:XMLLink"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: ComponentType
    
    The ComponentType type defines a type of component.  A type of
    component is identified by its ID, description, and signatures
    (interfaces that it either provides or requires).  A component
    type may be a base type (it has no substructure represented in
    this model), or it may be a compound type (which has substructure
    modeled in another xArch file).  If the component has substructure,
    then the subArch XLink will point at a file containing the
    subarchitecture of the component.
   -->
  <xsd:complexType name="ComponentType">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
      <xsd:element name="signature"   type="Signature"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="subArchitecture" type="SubArchitecture"
                   minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: ConnectorType
    
    The ConnectorType type defines a type of connector.  A type of
    connector is identified by its ID, description, and signatures
    (interfaces that it either provides or requires).  A connector
    type may be a base type (it has no substructure represented in
    this model), or it may be a compound type (which has substructure
    modeled in another xArch file).  If the connector has substructure,
    then the subArch XLink will point at a file containing the
    subarchitecture of the connector.
   -->
  <xsd:complexType name="ConnectorType">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
      <xsd:element name="signature"   type="Signature"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="subArchitecture" type="SubArchitecture"
                   minOccurs="0" maxOccurs="1"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: InterfaceType
    
    The InterfaceType type defines a type of interface.  For example,
    an interface called "Printable" might expose the ability to
    print the status of a component or connector.  Interface types
    are most generally thought of in API-oriented architectural
    styles, but exist in xArch as entrypoints (provided interfaces)
    and exitpoints (required interfaces) of a component or connector.
    At the types level, no semantic information (such as a specification)
    is defined in an interface type.  This can be specified in an
    extension or understood programmatically.  An InterfaceType is
    identified by its identifier and a human-readable description.
   -->
  <xsd:complexType name="InterfaceType">
    <xsd:sequence>
      <xsd:element name="description" type="archinstance:Description"/>
    </xsd:sequence>
    <xsd:attribute name="id"          type="archinstance:Identifier"/>
  </xsd:complexType>

  <!--
    TYPE: ArchTypes

    The ArchTypes type describes the types that are instantiated to make
    an architecture.  It describes three collections of type information:
    component types, connector types, and interface types.  A type is
    an opaque definition that defines the rules of instantiation of a
    component, connector, or interface.
    
    Types at this level have no semantic information associated 
    with them.  However, they give the designer and associated tools the
    ability to understand that "Component A and Component B are of the same
    type" or "Component A exposes an interface of type I, and Component B
    requires an interface of type I" which provides the ability to better
    understand the topological ordering of an architecture.  No specifications
    of what components, connectors, or interfaces actually do are provided
    at this level beyond the opaque descriptions associated with the types.
   -->
  <xsd:complexType name="ArchTypes">
    <xsd:sequence>
      <xsd:element name="componentType" type="ComponentType"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="connectorType" type="ConnectorType"
                   minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="interfaceType" type="InterfaceType"
                   minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>

  <!--
    TYPE: PrescribedComponentInstance
    
    The PrescribedComponentInstance type extends the 
    ComponentInstance type to add a pointer from the
    component instance back to the structural entity
    that was instantiated to create it.  By examining
    the structural entity, one can determine an 
    instance's type, etc.
   -->
  <xsd:complexType name="PrescribedComponentInstance">
    <xsd:complexContent>
      <xsd:extension base="archinstance:ComponentInstance">
        <xsd:sequence>
          <xsd:element name="structure" type="archinstance:XMLLink"
                       minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!--
    TYPE: PrescribedConnectorInstance
    
    The PrescribedConnectorInstance type extends the 
    ConnectorInstance type to add a pointer from the
    connector instance back to the structural entity
    that was instantiated to create it.  By examining
    the structural entity, one can determine an 
    instance's type, etc.
   -->
  <xsd:complexType name="PrescribedConnectorInstance">
    <xsd:complexContent>
      <xsd:extension base="archinstance:ConnectorInstance">
        <xsd:sequence>
          <xsd:element name="structure" type="archinstance:XMLLink"
                       minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!--
    TYPE: PrescribedInterfaceInstance
    
    The PrescribedInterfaceInstance type extends the 
    InterfaceInstance type to add a pointer from the
    interface instance back to the structural entity
    that was instantiated to create it.  By examining
    the structural entity, one can determine an 
    instance's type, etc.
   -->
  <xsd:complexType name="PrescribedInterfaceInstance">
    <xsd:complexContent>
      <xsd:extension base="archinstance:InterfaceInstance">
        <xsd:sequence>
          <xsd:element name="structure" type="archinstance:XMLLink"
                       minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <!--
    TYPE: PrescribedLinkInstance
    
    The PrescribedLinkInstance type extends the 
    LinkInstance type to add a pointer from the
    link instance back to the structural entity
    that was instantiated to create it.
   -->
  <xsd:complexType name="PrescribedLinkInstance">
    <xsd:complexContent>
      <xsd:extension base="archinstance:LinkInstance">
        <xsd:sequence>
          <xsd:element name="structure" type="archinstance:XMLLink"
                       minOccurs="0" maxOccurs="1"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

</xsd:schema>
