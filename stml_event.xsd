<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.cefns.nau.edu/~jg455/schemas/stml/stml_event.xsd" 
	xmlns:archdiff="http://www.ics.uci.edu/pub/arch/xArch/diff.xsd" 
	xmlns:archinstance="http://www.ics.uci.edu/pub/arch/xArch/instance.xsd" 
	xmlns:archtypes="http://www.ics.uci.edu/pub/arch/xArch/types.xsd" 
	xmlns:xlink="http://www.w3.org/1999/xlink" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
	attributeFormDefault="qualified" 
	elementFormDefault="qualified" 
	targetNamespace="http://www.cefns.nau.edu/~jg455/schemas/stml/stml_event.xsd">

	<!-- Import namespaces used -->
	<xsd:import namespace="http://www.ics.uci.edu/pub/arch/xArch/types.xsd" schemaLocation="http://www.isr.uci.edu/projects/xarchuci/ext/types.xsd"/>
	<xsd:import namespace="http://www.ics.uci.edu/pub/arch/xArch/instance.xsd" schemaLocation="http://www.isr.uci.edu/projects/xarchuci/core/instance.xsd"/>
	<xsd:import namespace="http://www.ics.uci.edu/pub/arch/xArch/diff.xsd" schemaLocation="http://www.isr.uci.edu/projects/xarchuci/ext/diff.xsd"/>

	<xsd:annotation>
		<xsd:documentation>
		STML Event
		
		A schema that captures the needed concepts to model events, which are
		occurrences within the development process that may trigger the creation 
		of socio-technical relationships, such as source code commits or 
		communication events.
		
		Schema design influenced by the general-purpose Event Ontology found at 
		http://motools.sourceforge.net/event/event.html

        LOG:
        
        11/18/2011 -- [John.Georgas@nau.edu]
        Initial release of the resource schema, after re-factoring and clean-up
        of the STML language (previously called STCML).
        
        NOTES:
        				
        TODO:
        	-- Add namespace references into each of the type links
        	-- Fix the namespace references to appropriate URLs. Github publishing? Need
        	clear URLs for Apigen library generation.
        	
        	????:
        	
		</xsd:documentation>
	</xsd:annotation>
	
	<!--  
		TYPE: EventSet
	
		A top-level container element for Event elements. Intended to be used by STMLRoot.	
	-->
	<xsd:complexType name="EventSet">
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="0" name="resource" type="Event"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!--
		TYPE: Event
	
		Base type for an event, that can be attached to nodes or edges in order to give
		some semantic information as to the reason for the node's or edge's existence. 
		This is the simplest of events, containing only an identifier. 
	-->
	<xsd:complexType name="Event">
		<xsd:attribute name="id" type="archinstance:Identifier"/>
	</xsd:complexType>
	
	<!--
		TYPE: SimpleEvent
		
		A more complex event type, also containing a textual description of 
		the event.
	-->
	<xsd:complexType name="SimpleEvent">
		<xsd:complexContent>
			<xsd:extension base="Event">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="description" type="Description"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!--
		TYPE: CompositeEvent
		
		A complex event type, intended for modeling composite groups of events, which
		are events that contain sub-events within them or which group sets of related
		events into units for purposes of abstraction.
	-->
	<xsd:complexType name="CompositeEvent">
		<xsd:complexContent>
			<xsd:extension base="SimpleEvent">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="eventCollection" type="EventCollection"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!--
		TYPE: EventCollection
		
		This element supports the grouping of events into conceptual groups. Member
		events are only links; intended usage is for the events that form the members
		of this group to be contained within an EventSet element, and then simply 
		linked to from EventCollection elements. This promotes reuse of Event specifications
		and reduces replication.
	-->
	<xsd:complexType name="EventCollection">
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="1" name="eventCollectionElement" type="archinstance:XMLLink"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!--
		TYPE: CommitEvent
		
		This event supports modeling an event corresponding to a commit operation on
		a version repository of a source code file. Note that the committer element
		is simply a link to an agent, who should be defined within an AgentSet (see
		stml_agent).
	-->
	<xsd:complexType name="CommitEvent>
		<xsd:complexContent>
			<xsd:extension base="Event">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="committer" type="archinstance:XMLLink"/>
					<xsd:element maxOccurs="1" minOccurs="1" name="commitTime" type="Time"/>
					<xsd:element maxOccurs="unbounded" minOccurs="1" name="resourceCollection" type="ResourceCollection"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!--
		TYPE: Time (abstract)
		
		This abstract type provides a "hook" for CommitEvent elements to include the notion
		of a specific time when the event happened. Specific ways of modeling time should
		extend this abstract type.
	-->
	<xsd:complexType name="Time" abstract="true"/>
	
	<!--
		TYPE: TimeToSecond
		
		A definition of time, to the precision of seconds.
	-->
	<xsd:complexType name="TimeToSecond">
		<xsd:complexContent>
			<xsd:extension base="Time">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="year" type="StringContent"/>
					<xsd:element maxOccurs="1" minOccurs="1" name="month" type="StringContent"/>
					<xsd:element maxOccurs="1" minOccurs="1" name="day" type="StringContent"/>
					<xsd:element maxOccurs="1" minOccurs="1" name="hour" type="StringContent"/>
					<xsd:element maxOccurs="1" minOccurs="1" name="minute" type="StringContent"/>
					<xsd:element maxOccurs="1" minOccurs="1" name="second" type="StringContent"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

  	<!--
		TYPE: ResourceCollection
		
		This supports modeling a collection of resources found in a ResourceSet (see 
		stml_resource), in order to group resources together for reference from a 
		CommitEvent.
	-->
	<xsd:complexType name="ResourceCollection">
		<xsd:sequence>
			<xsd:element maxOccurs="unbounded" minOccurs="1" name="resourceCollectionElement" type="archinstance:XMLLink"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!--
		TYPE: CommunicationEvent
		
		A base class for an event capturing a communication involving project 
		participants, and involving sets of development resources.
	--> 
	<xsd:complexType name="CommunicationEvent>
		<xsd:complexContent>
			<xsd:extension base="Event">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="0" name="time" type="Time"/>
					<xsd:element maxOccurs="unbounded" minOccurs="0" name="resourcesInvolved" type="ResourceCollection"/>
					<xsd:element maxOccurs="1" minOccurs="0" name="description" type="Description"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!--
		TYPE: PairCommunicationEvent
		
		An event that captures a directional communication between two agents that are
		stakeholders in a development effort. Intended use is for these links to connect 
		to agents defined in AgentSet (see stml_agent).
	--> 
	<xsd:complexType name="PairCommunicationEvent">
		<xsd:complexContent>
			<xsd:extension base="CommunicationEvent">
				<xsd:sequence>
					<xsd:element maxOccurs="1" minOccurs="1" name="originator" type="archinstance:XMLLink"/>
					<xsd:element maxOccurs="1" minOccurs="1" name="recipient" type="archinstance:XMLLink"/>
				</xsd:sequence
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<!--
		TYPE: GroupCommunicationEvent
		
		This element captures a communication between a multiplicity of agents, such as 
		might be documented after a group meeting or inferred through collaborations on 
		common resources. Participant elements are intended to link to AgentSet members
		(see stml_agent).
	-->
	<xsd:complexType name="GroupCommunicationEvent">
		<xsd:complexContent>
			<xsd:extension base="CommunicationEvent">
				<xsd:sequence>
					<xsd:element maxOccurs="unbounded" minOccurs="2" name="participant" type="archinstance:XMLLink"/>
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
</xsd:schema>